version: '3.8'

services:
  web:
    image: ${DOCKER_REGISTRY}:${DOCKER_IMAGE_TAG:-latest}
    container_name: antman_web_production
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings.production
      - DATABASE_URL=postgresql://antman:${POSTGRES_PASSWORD}@db:5432/antman_production
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=False
      - ALLOWED_HOSTS=antman.ai,www.antman.ai
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    networks:
      - antman_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  db:
    image: postgres:15-alpine
    container_name: antman_db_production
    restart: unless-stopped
    environment:
      - POSTGRES_DB=antman_production
      - POSTGRES_USER=antman
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - antman_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U antman -d antman_production"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: antman_redis_production
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - antman_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  nginx:
    image: nginx:alpine
    container_name: antman_nginx_production
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - web
    networks:
      - antman_network

  # 백업 서비스
  backup:
    image: postgres:15-alpine
    container_name: antman_backup_production
    restart: "no"
    environment:
      - POSTGRES_DB=antman_production
      - POSTGRES_USER=antman
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - antman_network
    entrypoint: /backup.sh
    profiles:
      - backup

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  antman_network:
    driver: bridge
